{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","api/auth-api.ts","utils/utils.ts","features/TodolistsList/Login/login-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/SnackBar.tsx","features/TodolistsList/Login/Login.tsx","components/error/Error404.tsx","app/App.tsx","app/store.ts","index.tsx","components/error/Error.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","tasks","t","splice","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","resultCode","item","catch","err","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","background","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","Error404","s","errorNum","errorText","errorSmile","App","demo","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"6JAuDYA,EAOAC,E,iCChDGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,0CDPRQ,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALvGF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXpFF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAAgGI,EAAhG,UAAoH,CAACL,WApBvHF,EAAe,SAsBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,K,SAqBlI1B,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KE3DZ,IAAMU,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAeNW,EAAU,SACbC,GACL,OAASjB,EAASS,KAAwE,aAAcQ,IAFhGD,EAAU,WAMf,OAAQhB,EAASO,IAAkC,YAN9CS,EAAU,WASf,OAAOhB,EAASW,OAAqB,eC1BhCO,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAc,CAACC,MAAMN,EAAKG,SAAS,MAE5CD,EAASG,EAAc,CAACC,MAAM,yBAElCJ,EAASK,EAAe,CAACC,OAAO,aAGvBC,EAA2B,SAACH,EAA4BJ,GACjEA,EAASG,EAAc,CAACC,MAAMA,EAAMI,WACpCR,EAASK,EAAe,CAACC,OAAO,a,QCLvBG,EAAQC,YAAY,CACzBC,KAAM,OACNC,aANa,CACjBC,YAAY,GAMRC,SAAU,CACNC,gBADM,SACUC,EAAOC,GACnBD,EAAMH,WAAaI,EAAOC,QAAQC,UAMrCC,EAAcX,EAAMY,QAEpBN,EAAkBN,EAAMa,QAAQP,gBCThCN,EAAQC,YAAY,CAC7BC,KAAM,MACNC,aATiB,CACjBN,OAAQ,UACRF,MAAO,KACPmB,eAAe,GAOfT,SAAU,CACNT,eAAgB,SAACW,EAAOC,GACpBD,EAAMV,OAASW,EAAOC,QAAQZ,QAElCH,cAAe,SAACa,EAAOC,GACnBD,EAAMZ,MAAQa,EAAOC,QAAQd,OAEjCoB,iBAAkB,SAACR,EAAOC,GACtBD,EAAMO,cAAgBN,EAAOC,QAAQK,kBAIpCE,EAAahB,EAAMY,Q,EAEiCZ,EAAMa,QAAzDjB,E,EAAAA,eAAgBF,E,EAAAA,cAAeqB,E,EAAAA,iBCpBhCf,EAAQC,YAAY,CAC7BC,KAAM,YACNC,aAJ4C,GAK5CE,SAAU,CACNY,iBAAkB,SAACV,EAAOC,GACtB,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MACzDoC,GAAS,GACTX,EAAMP,MAAMkB,EAAO,IAG3BG,cAAe,SAACd,EAAOC,GACnBD,EAAMe,QAAN,2BAAkBd,EAAOC,QAAQc,UAAjC,IAA2CC,OAAQ,MAAOC,aAAc,WAE5EC,sBAAuB,SAACnB,EAAOC,GAC3B,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMW,GAAOtC,MAAQ4B,EAAOC,QAAQ7B,OAExC+C,uBAAwB,SAACpB,EAAOC,GAC5B,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMW,GAAOM,OAAShB,EAAOC,QAAQe,QAEzCI,eAAgB,SAACrB,EAAOC,GACpB,OAAOA,EAAOC,QAAQoB,UAAUC,KAAI,SAAAV,GAAE,kCAASA,GAAT,IAAaI,OAAQ,MAAOC,aAAc,aAEpFM,6BAA8B,SAACxB,EAAOC,GAClC,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGtC,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMW,GAAOO,aAAejB,EAAOC,QAAQgB,iBAK1CO,EAAmBhC,EAAMY,Q,EAQlCZ,EAAMa,QANNI,E,EAAAA,iBACAI,E,EAAAA,cACAK,E,EAAAA,sBACAC,E,EAAAA,uBACAC,E,EAAAA,eACAG,E,EAAAA,6BCnCS/B,EAAQC,YAAY,CAC7BC,KAAM,QACNC,aAJiC,GAKjCE,SAAU,CACN4B,aAAc,SAAC1B,EAAOC,GAClB,IAAM0B,EAAQ3B,EAAMC,EAAOC,QAAQxB,YAC7BiC,EAAQgB,EAAMf,WAAU,SAAAgB,GAAC,OAAIA,EAAErD,KAAO0B,EAAOC,QAAQvB,UACvDgC,GAAS,GACTgB,EAAME,OAAOlB,EAAO,IAG5BmB,UAAW,SAAC9B,EAAOC,GACfD,EAAMC,EAAOC,QAAQ6B,KAAKC,YAAYjB,QAAQd,EAAOC,QAAQ6B,OAEjEE,aAAc,SAACjC,EAAOC,GAClB,IAAM0B,EAAQ3B,EAAMC,EAAOC,QAAQxB,YAC7BiC,EAAQgB,EAAMf,WAAU,SAAAgB,GAAC,OAAIA,EAAErD,KAAO0B,EAAOC,QAAQvB,UACvDgC,GAAS,IACTgB,EAAMhB,GAAN,2BAAmBgB,EAAMhB,IAAWV,EAAOC,QAAQtB,SAG3DsD,WAAY,SAAClC,EAAOC,GAChBD,EAAMC,EAAOC,QAAQxB,YAAcuB,EAAOC,QAAQyB,QAG1DQ,cAAe,SAACC,GACZA,EAAQC,QAAQvB,GAAe,SAACd,EAAOC,GACnCD,EAAMC,EAAOC,QAAQc,SAASzC,IAAM,MAExC6D,EAAQC,QAAQ3B,GAAkB,SAACV,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQ3B,OAEhC6D,EAAQC,QAAQhB,GAAgB,SAACrB,EAAOC,GACpCA,EAAOC,QAAQoB,UAAUgB,SAAQ,SAAAzB,GAC7Bb,EAAMa,EAAGtC,IAAM,YAMlBgE,EAAe9C,EAAMY,Q,EAGiCZ,EAAMa,QAA3DoB,E,EAAAA,aAAcI,E,EAAAA,UAAWG,E,EAAAA,aAAcC,G,EAAAA,WAwCxCM,GAAe,SAAC7D,EAAgB8D,EAAwC/D,GAAzD,OACxB,SAACM,EAAiC0D,GAC9B,IACMX,EADQW,IACKf,MAAMjD,GAAYiE,MAAK,SAAAf,GAAC,OAAIA,EAAErD,KAAOI,KACxD,GAAKoD,EAAL,CAMA,IAAMa,EAA6B,aAC/BC,SAAUd,EAAKc,SACfC,YAAaf,EAAKe,YAClBC,SAAUhB,EAAKgB,SACfC,UAAWjB,EAAKiB,UAChB3E,MAAO0D,EAAK1D,MACZiB,OAAQyC,EAAKzC,QACVmD,GAEPzD,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAAwBO,EAAYC,EAAQiE,GACvCrF,MAAK,SAAA0F,GACF,IAAMhD,EAASgC,EAAa,CAACtD,SAAQC,MAAO6D,EAAa/D,eACzDM,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,uBAlBrC4D,QAAQC,KAAK,iC,+CC7FZC,GAAcC,IAAMC,MAAK,SAAUC,GAC5CL,QAAQM,IAAI,sBAD6D,MAGjDC,mBAAS,IAHwC,oBAGpEpF,EAHoE,KAG7DqF,EAH6D,OAIjDD,mBAAwB,MAJyB,oBAIpErE,EAJoE,KAI7DuE,EAJ6D,KAMnEC,EAAU,WACS,KAAjBvF,EAAMwF,QACNN,EAAMK,QAAQvF,GACdqF,EAAS,KAETC,EAAS,sBAiBjB,OAAO,iCACH,eAACG,GAAA,EAAD,CAAWC,QAAQ,WACR3E,QAASA,EACTe,MAAO9B,EACP2F,SAjBS,SAACC,GACrBP,EAASO,EAAEC,cAAc/D,QAiBdgE,WAdW,SAACF,GACT,OAAV7E,GACAuE,EAAS,MAEM,KAAfM,EAAEG,UACFR,KAUOS,MAAM,QACNC,WAAYlF,EACZmF,SAAiC,YAAvBhB,EAAMrC,eAE3B,eAACsD,GAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAASW,SAAiC,YAAvBhB,EAAMrC,aAA9D,SACI,eAACyD,GAAA,EAAD,YCzCCC,GAAevB,IAAMC,MAAK,SAAUC,GAC7CL,QAAQM,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,oBAEtEoB,EAFsE,KAE5DC,EAF4D,OAGnDrB,mBAASF,EAAMpD,OAHoC,oBAGtE9B,EAHsE,KAG/DqF,EAH+D,KAiB3E,OAAOmB,EACD,eAACf,GAAA,EAAD,CAAW3D,MAAO9B,EAAO2F,SALX,SAACC,GACjBP,EAASO,EAAEC,cAAc/D,QAIyB4E,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZvB,EAAMS,SAAS3F,MAQb,uBAAM4G,cAda,WACrBH,GAAY,GACZpB,EAASH,EAAMpD,QAYb,SAAwCoD,EAAMpD,W,oBCb3C+E,GAAO7B,IAAMC,MAAK,SAACC,GAC5B,IAAM4B,EAAiBC,uBAAY,kBAAM7B,EAAM8B,WAAW9B,EAAMxB,KAAKxD,GAAIgF,EAAM7E,cAAa,CAAC6E,EAAMxB,KAAKxD,GAAIgF,EAAM7E,aAE5G4G,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCjC,EAAMkC,iBAAiBlC,EAAMxB,KAAKxD,GAAIgH,EAAiBrI,EAAawI,UAAYxI,EAAayI,IAAKpC,EAAM7E,cACzG,CAAC6E,EAAMxB,KAAKxD,GAAIgF,EAAM7E,aAEnBkH,EAAuBR,uBAAY,SAACS,GACtCtC,EAAMuC,gBAAgBvC,EAAMxB,KAAKxD,GAAIsH,EAAUtC,EAAM7E,cACtD,CAAC6E,EAAMxB,KAAKxD,GAAIgF,EAAM7E,aAEzB,OAAO,uBAAyBqH,UAAWxC,EAAMxB,KAAKzC,SAAWpC,EAAawI,UAAY,UAAY,GAA/F,UACH,eAACM,GAAA,EAAD,CACIR,QAASjC,EAAMxB,KAAKzC,SAAWpC,EAAawI,UAC5CjB,MAAM,UACNT,SAAUsB,IAGd,eAACV,GAAD,CAAczE,MAAOoD,EAAMxB,KAAK1D,MAAO2F,SAAU4B,IACjD,eAACpB,GAAA,EAAD,CAAYE,QAASS,EAArB,SACI,eAACc,GAAA,EAAD,QATS1C,EAAMxB,KAAKxD,O,UCGnB2H,GAAW7C,IAAMC,MAAK,SAAUC,GACzCL,QAAQM,IAAI,mBAEZ,IAAMxE,EAAWmH,cACjBC,qBAAU,WACN,IJ0BqB1H,EI1Bf2H,GJ0Be3H,EI1BM6E,EAAMhF,GJ0BW,SAACS,GACjDA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAAsBO,GACjBnB,MAAK,SAAC0F,GACH,IAAMtB,EAAQsB,EAAInE,KAAKwH,MACjBrG,EAASiC,GAAW,CAACP,QAAOjD,eAClCM,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,oBIhCrCN,EAASqH,KACV,IAEH,IAAME,EAAUnB,uBAAY,SAAC/G,GACzBkF,EAAMgD,QAAQlI,EAAOkF,EAAMhF,MAC5B,CAACgF,EAAMgD,QAAShD,EAAMhF,KAMnBiI,EAAsBpB,uBAAY,SAAC/G,GACrCkF,EAAMiD,oBAAoBjD,EAAMhF,GAAIF,KACrC,CAACkF,EAAMhF,GAAIgF,EAAMiD,sBAEdC,EAAoBrB,uBAAY,kBAAM7B,EAAMmD,aAAa,MAAOnD,EAAMhF,MAAK,CAACgF,EAAMhF,GAAIgF,EAAMmD,eAC5FC,EAAuBvB,uBAAY,kBAAM7B,EAAMmD,aAAa,SAAUnD,EAAMhF,MAAK,CAACgF,EAAMhF,GAAIgF,EAAMmD,eAClGE,EAA0BxB,uBAAY,kBAAM7B,EAAMmD,aAAa,YAAanD,EAAMhF,MAAK,CAACgF,EAAMhF,GAAIgF,EAAMmD,eAG1GG,EAAmBtD,EAAM5B,MAS7B,MAPqB,WAAjB4B,EAAMtC,SACN4F,EAAmBtD,EAAM5B,MAAMV,QAAO,SAAAW,GAAC,OAAIA,EAAEtC,SAAWpC,EAAayI,QAEpD,cAAjBpC,EAAMtC,SACN4F,EAAmBtD,EAAM5B,MAAMV,QAAO,SAAAW,GAAC,OAAIA,EAAEtC,SAAWpC,EAAawI,cAGlE,iCACH,gCAAI,eAACd,GAAD,CAAczE,MAAOoD,EAAMlF,MAAO2F,SAAUwC,IAC5C,eAAChC,GAAA,EAAD,CAAYE,QAxBG,WAEnBnB,EAAMuD,eAAevD,EAAMhF,KAsBcgG,SAAiC,YAAvBhB,EAAMrC,aAArD,SACI,eAAC+E,GAAA,EAAD,SAGR,eAAC7C,GAAD,CAAaQ,QAAS2C,EAASrF,aAAcqC,EAAMrC,eACnD,+BAEQ2F,EAAiBtF,KAAI,SAAAK,GAAC,OAAI,eAACsD,GAAD,CAAiBnD,KAAMH,EAAGlD,WAAY6E,EAAMhF,GACtC8G,WAAY9B,EAAM8B,WAClBS,gBAAiBvC,EAAMuC,gBACvBL,iBAAkBlC,EAAMkC,kBAHnB7D,EAAErD,SAO/C,uBAAKwI,MAAO,CAACC,WAAY,QAAzB,UACI,eAACC,GAAA,EAAD,CAAQlD,QAA0B,QAAjBR,EAAMtC,OAAmB,WAAa,OAC/CyD,QAAS+B,EACThC,MAAO,UAFf,iBAKA,eAACwC,GAAA,EAAD,CAAQlD,QAA0B,WAAjBR,EAAMtC,OAAsB,WAAa,OAClDyD,QAASiC,EACTlC,MAAO,UAFf,oBAIA,eAACwC,GAAA,EAAD,CAAQlD,QAA0B,cAAjBR,EAAMtC,OAAyB,WAAa,OACrDyD,QAASkC,EACTnC,MAAO,YAFf,gC,6BCnECyC,GAAqC,WAE9C,IAAM5F,EAAY6F,aAAyD,SAAAnH,GAAK,OAAIA,EAAMsB,aACpFK,EAAQwF,aAA8C,SAAAnH,GAAK,OAAIA,EAAM2B,SACrE9B,EAAasH,aAAuC,SAAAnH,GAAK,OAAIA,EAAMoH,KAAKvH,cACxEb,EAAWmH,cAEjBC,qBAAU,WACN,GAAKvG,EAAL,CAGA,IAAMwG,ENqBH,SAACrH,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,IACKZ,MAAK,SAAC0F,GACHjE,EAASqC,EAAe,CAACC,UAAW2B,EAAInE,QACxCE,EAASK,EAAe,CAACC,OAAQ,mBMzBzCN,EAASqH,MACV,IAEH,IAAMhB,EAAaD,uBAAY,SAAU7G,EAAYG,GACjD,IAAM2H,EL+Bc,SAAC1H,EAAgBD,GAAjB,OAAwC,SAACM,GACjEA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAAwBO,EAAYC,GAC/BpB,MAAK,SAAA0F,GACF,IAAMhD,EAASyB,EAAa,CAAC/C,SAAQD,eACrCM,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,mBKrCvB+H,CAAa9I,EAAIG,GAC/BM,EAASqH,KACV,IAEGE,EAAUnB,uBAAY,SAAU/G,EAAeK,GACjD,IAAM2H,ELmCW,SAAChI,EAAeK,GAAhB,OAAuC,SAACM,GAC7DA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAA0F,GACF,GAA4B,IAAxBA,EAAInE,KAAKwI,WAAkB,CAC3B,IAAMvF,EAAOkB,EAAInE,KAAKA,KAAKyI,KACrBtH,EAAS6B,EAAU,CAACC,SAC1B/C,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,oBAEjCN,EAASK,EAAe,CAACC,OAAQ,eAGxCkI,OAAM,SAACC,GACJzI,EAASG,EAAc,CAACC,MAAOqI,EAAIjI,WACnCR,EAASK,EAAe,CAACC,OAAQ,gBKlDvBoI,CAAUrJ,EAAOK,GAC/BM,EAASqH,KACV,IAEGsB,EAAevC,uBAAY,SAAU7G,EAAYe,EAAsBZ,GACzE,IAAM2H,EAAQ7D,GAAajE,EAAI,CAACe,UAASZ,GACzCM,EAASqH,KACV,IAEGP,EAAkBV,uBAAY,SAAU7G,EAAYqJ,EAAkBlJ,GACxE,IAAM2H,EAAQ7D,GAAajE,EAAI,CAACF,MAAOuJ,GAAWlJ,GAClDM,EAASqH,KACV,IAEGK,EAAetB,uBAAY,SAAUjF,EAAyBzB,GAChE,IAAMuB,EAASmB,EAAuB,CAAC7C,GAAIG,EAAYuC,OAAQd,IAC/DnB,EAASiB,KACV,IAEG6G,EAAiB1B,uBAAY,SAAU7G,GACzC,INAyBG,EMAnB2H,GNAmB3H,EMAMH,ENC5B,SAACS,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCN,EAASwC,EAA6B,CAACjD,GAAIG,EAAYwC,aAAc,aACrE/C,EAA4BO,GACvBnB,MAAK,SAAC0F,GACHjE,EAAS0B,EAAiB,CAACnC,GAAIG,KAC/BM,EAASK,EAAe,CAACC,OAAQ,oBMNzCN,EAASqH,KACV,IAEGG,EAAsBpB,uBAAY,SAAU7G,EAAYF,GAC1D,IAAMgI,EN0BuB,SAAC9H,EAAYF,GAC9C,OAAO,SAACW,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAA4BI,EAAIF,GAC3Bd,MAAK,SAAC0F,GACHjE,EAASmC,EAAsB,CAAC5C,KAAIF,WACpCW,EAASK,EAAe,CAACC,OAAQ,mBMhC3BuI,CAAsBtJ,EAAIF,GACxCW,EAASqH,KACV,IAEGyB,EAAc1C,uBAAY,SAAC/G,GAC7B,IAAMgI,ENCe,SAAChI,GAC1B,OAAO,SAACW,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAA4BE,GACvBd,MAAK,SAAC0F,GACyB,IAAxBA,EAAInE,KAAKwI,YACTtI,EAAS8B,EAAc,CAACE,SAAUiC,EAAInE,KAAKA,KAAKyI,QAChDvI,EAASK,EAAe,CAACC,OAAQ,iBAEjCN,EAASG,EAAc,CAACC,MAAO6D,EAAInE,KAAKG,SAAS,MACjDD,EAASK,EAAe,CAACC,OAAQ,gBAIxCkI,OAAM,SAACC,GACJzI,EAASG,EAAc,CAACC,MAAOqI,EAAIjI,WACnCR,EAASK,EAAe,CAACC,OAAQ,gBMjB3ByI,CAAc1J,GAC5BW,EAASqH,KACV,CAACrH,IAEJ,OAAKa,EAIE,uCACH,eAACmI,GAAA,EAAD,CAAMC,WAAS,EAAClB,MAAO,CAACmB,QAAS,QAAjC,SACI,eAAC9E,GAAD,CAAaQ,QAASkE,MAE1B,eAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ7G,EAAUC,KAAI,SAAAV,GACV,IAAIuH,EAAmBzG,EAAMd,EAAGtC,IAEhC,OAAO,eAACyJ,GAAA,EAAD,CAAMT,MAAI,EAAV,SACH,eAACc,GAAA,EAAD,CAAOtB,MAAO,CAACmB,QAAS,QAAxB,SACI,eAAChC,GAAD,CACI3H,GAAIsC,EAAGtC,GACPF,MAAOwC,EAAGxC,MACVsD,MAAOyG,EACP/C,WAAYA,EACZqB,aAAcA,EACdH,QAASA,EACTd,iBAAkBkC,EAClB1G,OAAQJ,EAAGI,OACXC,aAAcL,EAAGK,aACjB4F,eAAgBA,EAChBhB,gBAAiBA,EACjBU,oBAAqBA,OAdV3F,EAAGtC,YAZ/B,eAAC,KAAD,CAAU+J,GAAI,Y,sECxEvBC,GAAQlF,IAAMmF,YAAuC,SACvDjF,EAAOkF,GACP,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAK1E,QAAQ,UAAaR,OAI3D,SAASoF,KACZ,IAAM3J,EAAWmH,cACX/G,EAAQ+H,aAA6C,SAAAnH,GAAK,OAAIA,EAAM4I,IAAIxJ,SACxEyJ,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJ/J,EAASG,EAAc,CAACC,MAAO,SAInC,OACI,eAAC4J,GAAA,EAAD,CAAUC,KAAgB,OAAV7J,EAAgB8J,iBAAkB,IAAMC,QAASN,EAAjE,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKlK,M,0ECNJmK,GAAQ,WACjB,IAAMvK,EAAWmH,cACXtG,EAAasH,aAAuC,SAAAnH,GAAK,OAAIA,EAAMoH,KAAKvH,cACxE2J,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAahC,OAZKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAKdI,EAAOH,SAEDG,EAAOH,SAAS1K,OAAS,IAChC8K,EAAOJ,SAAW,yBAFlBI,EAAOJ,SAAW,WAKfI,GAEXE,SAAU,SAAAH,GVpBK,IAACjL,EUqBZE,GVrBYF,EUqBKiL,EVrBqB,SAAC/K,GAC/CA,EAASK,EAAe,CAACC,OAAO,aAChCT,EAAcC,GACTvB,MAAK,SAAA0F,GAC0B,IAAxBA,EAAInE,KAAKwI,YACTtI,EAASe,EAAgB,CAACI,OAAM,KAChCnB,EAASK,EAAe,CAACC,OAAO,gBAEhCP,EAAqBkE,EAAInE,KAAME,MAGtCwI,OAAM,SAACpI,GACJG,EAAyBH,EAAOJ,SUUhCwK,EAAOW,eAIf,OAAItK,EACO,eAAC,KAAD,CAAUyI,GAAI,MAGlB,eAACN,GAAA,EAAD,CAAMC,WAAS,EAACmC,eAAgB,SAAUrD,MAAO,CAACmB,QAAS,QAA3D,SACH,eAACF,GAAA,EAAD,CAAMT,MAAI,EAAC6C,eAAgB,SAA3B,SACI,eAAC/B,GAAA,EAAD,CAAOtB,MAAO,CAACmB,QAAS,OAAQmC,WAAY,yBAA5C,SACI,uBAAMH,SAAUV,EAAOc,aAAvB,SACI,gBAACC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBACIC,KAAM,wCACNC,OAAQ,SACRC,IAAI,sBAHR,sBAMJ,yEACA,2DACA,mDAEJ,gBAACC,GAAA,EAAD,WACI,eAAC9G,GAAA,EAAD,aACIO,MAAM,QACNwG,OAAO,UACHrB,EAAOsB,cAAc,WAE5BtB,EAAOuB,QAAQpB,OACTH,EAAOQ,OAAOL,OACd,sBAAK5C,MAAO,CAACtC,MAAO,OAApB,SAA6B+E,EAAOQ,OAAOL,QAClD,eAAC7F,GAAA,EAAD,aACIkH,KAAK,WACL3G,MAAM,WACNwG,OAAO,UACHrB,EAAOsB,cAAc,cAE5BtB,EAAOuB,QAAQnB,UACTJ,EAAOQ,OAAOJ,UACd,sBAAK7C,MAAO,CAACtC,MAAO,OAApB,SAA6B+E,EAAOQ,OAAOJ,WAClD,eAACqB,GAAA,EAAD,aACI5G,MAAO,cACP6G,QAAS,eAAClF,GAAA,EAAD,CAAUR,QAASgE,EAAOO,OAAOF,cACtCL,EAAOsB,cAAc,gBAE7B,eAAC7D,GAAA,EAAD,CAAQ+D,KAAM,SAAUjH,QAAS,YAAaU,MAAO,UAArD,kC,oBC9FrB,SAAS0G,KACZ,OACI,uBAAKpF,UAAWqF,KAAEhM,MAAlB,UACI,sBAAK2G,UAAWqF,KAAEC,SAAlB,iBACA,sBAAKtF,UAAWqF,KAAEE,UAAlB,6BACA,sBAAKvF,UAAWqF,KAAEG,WAAlB,sCCoEGC,OAhDf,YAAwC,EAA1BC,KAA2B,IAC/BnM,EAAS6H,aAAiD,SAAAnH,GAAK,OAAIA,EAAM4I,IAAItJ,UAC7EiB,EAAgB4G,aAAuC,SAAAnH,GAAK,OAAIA,EAAM4I,IAAIrI,iBAC1EV,EAAasH,aAAuC,SAAAnH,GAAK,OAAIA,EAAMoH,KAAKvH,cACxEb,EAAWmH,cAUjB,OAJAC,qBAAU,WACNpH,GXH6B,SAACA,GAClCA,EAASK,EAAe,CAACC,OAAQ,aACjCT,IACKtB,MAAK,SAAA0F,GAC0B,IAAxBA,EAAInE,KAAKwI,YACTtI,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBkE,EAAInE,KAAME,MAGtCwI,OAAM,SAACpI,GACJG,EAAyBH,EAAOJ,MAEnC0M,SAAQ,WACL1M,EAASwB,EAAiB,CAACD,eAAe,aWX/C,IAEEA,EAQD,uBAAKwF,UAAU,MAAf,UACI,eAAC4C,GAAD,IACA,eAACgD,GAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,gBAACC,GAAA,EAAD,WACI,eAACrH,GAAA,EAAD,CAAYsH,KAAK,QAAQrH,MAAM,UAAUsH,aAAW,OAApD,SACI,eAACC,GAAA,EAAD,MAEJ,eAACC,GAAA,EAAD,CAAYlI,QAAQ,KAApB,kBAGClE,GAAc,eAACoH,GAAA,EAAD,CAAQxC,MAAM,UAAUC,QA1BnC,WAChB1F,GZOsB,SAACA,GAC3BA,EAASK,EAAe,CAACC,OAAO,aAChCT,IACKtB,MAAK,SAAA0F,GAC0B,IAAxBA,EAAInE,KAAKwI,YACTtI,EAASe,EAAgB,CAACI,OAAM,KAChCnB,EAASK,EAAe,CAACC,OAAO,gBAEhCP,EAAqBkE,EAAInE,KAAME,MAGtCwI,OAAM,SAACpI,GACJG,EAAyBH,EAAOJ,UYMT,0BAGhB,YAANM,GAAwB,eAAC4M,GAAA,EAAD,CAAgBzH,MAAO,cAChD,eAAC0H,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,KAAM,QAASC,QAAS,eAAC,GAAD,MAC/B,eAAC,KAAD,CAAOD,KAAM,IAAKC,QAAS,eAAC,GAAD,MAC3B,eAAC,KAAD,CAAOD,KAAM,MAAOC,QAAS,eAACnB,GAAD,MAC7B,eAAC,KAAD,CAAOkB,KAAM,IAAKC,QAAS,eAAC,KAAD,CAAUhE,GAAI,kBA1B9C,sBACHvB,MAAO,CAAC6E,SAAU,QAASW,IAAK,MAAOC,UAAW,SAAUlD,MAAO,QADhE,SAEH,eAACmD,GAAA,EAAD,O,oBCrCNC,GAAcC,aAAgB,CAChChL,MAAOY,EACPjB,UAAWG,EACXmH,IAAKnI,EACL2G,KAAMhH,IAGGwM,GAAQC,YAAe,CAChCxM,QAASqM,GACTI,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,SAMvEC,OAAON,MAAQA,G,aCdfO,IAASC,OACL,eAAC,KAAD,UACI,eAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,eAAC,GAAD,QAIRS,SAASC,eAAe,SAM5BlQ,K,mBCrBAmQ,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,SAAW,wBAAwB,UAAY,yBAAyB,WAAa,6B","file":"static/js/main.a72a9cbc.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3bb1f301-4343-478c-bd6d-e432168f19d7'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"./todolists-api\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3bb1f301-4343-478c-bd6d-e432168f19d7'\r\n    }\r\n})\r\n\r\nexport type MeResponseType = {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n     return   instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>('auth/login', data)\r\n\r\n    },\r\n    me() {\r\n        return  instance.get<ResponseType<MeResponseType>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n","import {setAppErrorAC, setAppErrorType, setAppStatusAC, setAppStatusType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC({error:error.message}))\r\n    dispatch(setAppStatusAC({status:'failed'}))}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppErrorType | setAppStatusType>","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../../api/auth-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n        name: \"auth\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            setIsLoggedInAC(state, action: PayloadAction<{value:boolean}>) {\r\n                state.isLoggedIn = action.payload.value\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value:true}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value:true}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedInAC} from \"../features/TodolistsList/Login/login-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC, setInitializedAC} = slice.actions\r\n\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n//types\r\nexport type setAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type setInitializedType = ReturnType<typeof setInitializedAC>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    setAppStatusAC,\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state, action: PayloadAction<{ id: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.slice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC: (state, action: PayloadAction<{ id: string, title: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodolistsAC: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    setTodolistsAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({error: res.data.messages[0]}))\r\n                    dispatch(setAppStatusAC({status: 'failed'}))\r\n                }\r\n\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: err.message}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType, removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, setAppErrorType, setAppStatusAC, setAppStatusType,} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC({tasks, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: err.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | setAppStatusType\r\n    | setAppErrorType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading' } >\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {useState} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {setAppErrorAC} from \"../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n        // setOpen(false);\r\n\r\n    };\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {Paper} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./login-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Min password length 3';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'} style={{padding: '30px'}}>\r\n        <Grid item justifyContent={'center'}>\r\n            <Paper style={{padding: '20px', background: 'rgb(255,250,250, 0.9)'}}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a\r\n                                    href={'https://social-network.samuraijs.com/'}\r\n                                    target={'_blank'}\r\n                                    rel=\"noopener noreferrer\"> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email\r\n                                && formik.errors.email\r\n                                && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password\r\n                                && formik.errors.password\r\n                                && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox checked={formik.values.rememberMe}/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n}","import React from 'react'\r\nimport s from './Error.module.css'\r\n\r\nexport function Error404() {\r\n    return (\r\n        <div className={s.error}>\r\n            <div className={s.errorNum}>404</div>\r\n            <div className={s.errorText}>Page not found!</div>\r\n            <div className={s.errorSmile}>¯\\_(ツ)_/¯</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../components/SnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/TodolistsList/Login/Login\";\r\nimport {Error404} from \"../components/error/Error404\";\r\nimport {logoutTC} from \"../features/TodolistsList/Login/login-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler=()=>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === `loading` && <LinearProgress color={'secondary'}/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'/'} element={<TodolistsList/>}/>\r\n                    <Route path={'404'} element={<Error404/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/TodolistsList/Login/login-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__3TteU\",\"errorNum\":\"Error_errorNum__3qXT8\",\"errorText\":\"Error_errorText__2iOeB\",\"errorSmile\":\"Error_errorSmile__19fHA\"};"],"sourceRoot":""}