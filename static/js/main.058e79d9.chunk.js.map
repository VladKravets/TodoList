{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","api/auth-api.ts","utils/utils.ts","features/TodolistsList/Login/login-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/SnackBar.tsx","features/TodolistsList/Login/Login.tsx","components/error/Error404.tsx","app/App.tsx","app/store.ts","index.tsx","components/error/Error.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","entityStatus","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","resultCode","item","catch","err","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","background","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","Error404","s","errorNum","errorText","errorSmile","App","demo","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.058e79d9.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3bb1f301-4343-478c-bd6d-e432168f19d7'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"./todolists-api\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3bb1f301-4343-478c-bd6d-e432168f19d7'\r\n    }\r\n})\r\n\r\nexport type MeResponseType = {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n     return   instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>('auth/login', data)\r\n\r\n    },\r\n    me() {\r\n        return  instance.get<ResponseType<MeResponseType>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n","import {setAppErrorAC, setAppErrorType, setAppStatusAC, setAppStatusType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppErrorType | setAppStatusType>","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../../api/auth-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = any\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedInAC} from \"../features/TodolistsList/Login/login-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error\r\n    } as const\r\n}\r\nexport const setInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            debugger\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type setAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type setInitializedType = ReturnType<typeof setInitializedAC>\r\nexport type ActionsType = setAppStatusType | setAppErrorType | setInitializedType","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    setAppErrorType,\r\n    setAppStatusAC,\r\n    setAppStatusType\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id, entityStatus\r\n} as const)\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n\r\n            })\r\n            .catch((err:AxiosError)=>{\r\n                dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | setAppStatusType\r\n    | setAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, setAppErrorType, setAppStatusAC, setAppStatusType} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC('Some error occurred'))\r\n            }\r\n        })\r\n        .catch((err:AxiosError)=>{\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | setAppStatusType\r\n    | setAppErrorType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading' } >\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn){\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\nif (!isLoggedIn){\r\n    return <Navigate to={'/login'}/>\r\n}\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {useState} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {setAppErrorAC} from \"../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        // setOpen(false);\r\n\r\n    };\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {Paper} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./login-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Min password length 3';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'} style={{padding: '30px'}}>\r\n        <Grid item justifyContent={'center'}>\r\n            <Paper style={{padding: '20px', background: 'rgb(255,250,250, 0.9)'}}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a\r\n                                    href={'https://social-network.samuraijs.com/'}\r\n                                    target={'_blank'}\r\n                                    rel=\"noopener noreferrer\"> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email\r\n                                && formik.errors.email\r\n                                && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password\r\n                                && formik.errors.password\r\n                                && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox checked={formik.values.rememberMe}/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n}","import React from 'react'\r\nimport s from './Error.module.css'\r\n\r\nexport function Error404() {\r\n    return (\r\n        <div className={s.error}>\r\n            <div className={s.errorNum}>404</div>\r\n            <div className={s.errorText}>Page not found!</div>\r\n            <div className={s.errorSmile}>¯\\_(ツ)_/¯</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../components/SnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/TodolistsList/Login/Login\";\r\nimport {Error404} from \"../components/error/Error404\";\r\nimport {logoutTC} from \"../features/TodolistsList/Login/login-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler=()=>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === `loading` && <LinearProgress color={'secondary'}/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'/'} element={<TodolistsList/>}/>\r\n                    <Route path={'404'} element={<Error404/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/TodolistsList/Login/login-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__3TteU\",\"errorNum\":\"Error_errorNum__3qXT8\",\"errorText\":\"Error_errorText__2iOeB\",\"errorSmile\":\"Error_errorSmile__19fHA\"};"],"sourceRoot":""}